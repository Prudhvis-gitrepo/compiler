(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in expr.grm.desc *)
%pure
%name Expr (* The prefix to use on the name of LrValFun structure *)

(* The terminals or tokens of the language *)
%term CONST of int
    | VAR of string
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EOF
    | NEWLINE
    | IF | THEN | ELSE
    | FOR | TO | DO 
    | WHILE | BREAK
    | ASSIGN | EQUAL 
    | LET | IN
    | END | SEMICOLON

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | EX	 of Ast.Expr
       | EQUATE	 of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr list

%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL  DIV       (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXPS                 ( EXPS )
	
EXPS    : (* empty *)          ( []                  )
	| EXP SEMICOLON EXPS     ( EXP :: EXPS         )
	| EXP EXPS		(EXP :: EXPS	)

EXP     : CONST                ( Ast.Const CONST     )
	| VAR			(Ast.Var VAR	)

	| EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
	| EXP DIV EXP		(Ast.div EXP1 EXP2 )

EX	: VAR ASSIGN EXP	(Ast.ASSIGN (Ast.Var VAR) EXP)

	| LET EXPS IN EXPS END ( Ast.LET EXPS1 EXPS2 )  
      
	| IF EQUATE THEN EX	(Ast.IF EQUATE EX )

	| WHILE EQUATE DO EX	(Ast.WHILE EQUATE EX )
	| FOR VAR ASSIGN EXP TO EXP DO EX (Ast.FOR (Ast.Var VAR) EXP1 EXP2 EX )
	
EQUATE	: EXP EQUAL EXP		(Ast.EQUAL EXP1 EXP2 )
